using System.Collections.Generic;
using System.Reflection;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Onion.Application;
using Onion.Application.Features.ProductFeatures.Commands;
using Onion.Application.Interfaces;
using Onion.Data;
using Onion.Identity;
using Onion.Infrastructure;
using Onion.Shared.Data;
using Onion.Web.Extensions;
using Onion.Web.Middlewares;
using Onion.Web.Services;

namespace Onion.Web
{
    /// <summary>
    /// Web application start-up class.
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Startup"/> class.
        /// </summary>
        /// <param name="configuration">The application configuration.</param>
        public Startup(IConfiguration configuration)
        {
            this.Configuration = configuration;
        }

        /// <summary>
        /// Gets the application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// Configures the application services.
        /// </summary>
        /// <param name="services">The services.</param>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddHttpContextAccessor();

            services.AddInfrastructure(Configuration);
            services.AddSharedDataInfrastructure(Configuration);
            services.AddIdentityInfrastructure(Configuration);
            services.AddDataInfrastructure(Configuration);
            services.AddApplicationInfrastructure();

            services.AddScoped<IAuthenticatedUserService, AuthenticatedUserService>();
            services.AddSingleton<IPageUriService>(provider =>
            {
                var accessor = provider.GetRequiredService<IHttpContextAccessor>();
                var request = accessor.HttpContext.Request;
                var uri = string.Concat(request.Scheme, "://", request.Host.ToUriComponent());

                return new PageUriService(uri);
            });

            #region Swagger

            services.AddSwaggerGen(c =>
            {
                // Locate the XML file being generated by ASP.NET.
                c.LoadXmlComments(Assembly.GetExecutingAssembly());
                c.LoadXmlComments(typeof(Domain.Common.BaseEntity));
                c.LoadXmlComments(typeof(Application.DependencyInjection));
                c.LoadXmlComments(typeof(Data.DependencyInjection));
                c.LoadXmlComments(typeof(Identity.DependencyInjection));
                c.LoadXmlComments(typeof(Infrastructure.DependencyInjection));
                c.LoadXmlComments(typeof(Shared.Data.DependencyInjection));

                c.CustomSchemaIds(SwaggerGenExtensions.SchemaIdSelector);
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1",
                    Title = "Onion",
                });

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    Description =
                        "Input your Bearer token in this format - Bearer {your token here} to access this API",
                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer",
                            },
                            Scheme = "Bearer",
                            Name = "Bearer",
                            In = ParameterLocation.Header,
                        },
                        new List<string>()
                    },
                });
            });

            #endregion Swagger

            #region API Versioning

            // Add API Versioning to the Project
            services.AddApiVersioning(config =>
            {
                // Specify the default API Version as 1.0
                config.DefaultApiVersion = new ApiVersion(1, 0);

                // If the client hasn't specified the API version in the request, use the default API version number
                config.AssumeDefaultVersionWhenUnspecified = true;

                // Advertise the API versions supported for the particular endpoint
                config.ReportApiVersions = true;
            });

            #endregion API Versioning
        }

        /// <summary>
        /// Configures the application.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="env">The web host environment.</param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();
            app.UseMiddleware<ErrorHandlerMiddleware>();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapDefaultControllerRoute();
                endpoints.MapGet("/", async context => { await context.Response.WriteAsync("Hello World!"); });
            });

            app.UseSwagger();
            app.UseSwaggerUI(c => { c.SwaggerEndpoint("/swagger/v1/swagger.json", "Onion"); });
        }
    }
}